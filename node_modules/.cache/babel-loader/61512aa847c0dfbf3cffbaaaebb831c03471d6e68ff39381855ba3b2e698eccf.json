{"ast":null,"code":"var _jsxFileName = \"/Users/michael/Documents/Projects/react-apps/appointment-planner-starting-v18/src/containers/contactsPage/ContactsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\nimport { TileList } from \"../../components/tileList/TileList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContactsPage = (_ref, _ref2) => {\n  _s();\n  let {\n    contactArray\n  } = _ref;\n  let {\n    addContact\n  } = _ref2;\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\n\n  const [name, setName] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n\n  //I don't completely understand\n  const [duplicateName, setDuplicateName] = useState(false);\n  const handleSubmit = e => {\n    e.preventDefault();\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\n\n    const newContact = {\n      name: name,\n      phone: phone,\n      email: email\n    };\n    addContact(newContact);\n    console.log(newContact);\n    setName(\"\");\n    setPhone(\"\");\n    setEmail(\"\");\n  };\n\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\n\n  useEffect(() => {\n    if (contactArray.some(contact => contact.name === name)) {\n      setDuplicateName(true);\n    } else {\n      setDuplicateName(false);\n    }\n  }, [name]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContactForm, {\n        name: name,\n        setName: setName,\n        phone: phone,\n        setPhone: setPhone,\n        email: email,\n        setEmail: setEmail,\n        handleSubmit: handleSubmit,\n        contactArray: contactArray,\n        duplicateName: duplicateName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TileList, {\n        contactArray: contactArray\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(ContactsPage, \"eW+yBmIuEqSjPLc3QkklVWC3wAc=\");\n_c = ContactsPage;\nvar _c;\n$RefreshReg$(_c, \"ContactsPage\");","map":{"version":3,"names":["React","useState","useEffect","ContactForm","TileList","jsxDEV","_jsxDEV","ContactsPage","_ref","_ref2","_s","contactArray","addContact","name","setName","phone","setPhone","email","setEmail","duplicateName","setDuplicateName","handleSubmit","e","preventDefault","newContact","console","log","some","contact","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/michael/Documents/Projects/react-apps/appointment-planner-starting-v18/src/containers/contactsPage/ContactsPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\nexport const ContactsPage = ({contactArray}, {addContact}) => {\r\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\r\n\r\n  const [name, setName] = useState(\"\");\r\n  const [phone, setPhone] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n\r\n  //I don't completely understand\r\n  const [duplicateName, setDuplicateName] = useState(false)\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\r\n    \r\n      const newContact = {\r\n        name: name,\r\n        phone: phone,\r\n        email: email,\r\n      }\r\n      addContact(newContact)\r\n      console.log(newContact)\r\n\r\n      setName(\"\");\r\n      setPhone(\"\");\r\n      setEmail(\"\")\r\n    \r\n\r\n      \r\n    }\r\n\r\n  \r\n\r\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\r\n\r\n  useEffect(()=> {\r\n    if(contactArray.some((contact)=> contact.name === name)) {\r\n      setDuplicateName(true)\r\n    }\r\n    else {\r\n      setDuplicateName(false)\r\n\r\n    }\r\n\r\n  }, [name])\r\n\r\n  \r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Contact</h2> \r\n        <ContactForm \r\n\r\n        name={name}\r\n        setName={setName}\r\n        phone={phone}\r\n        setPhone={setPhone}\r\n        email={email}\r\n        setEmail={setEmail}\r\n        handleSubmit={handleSubmit}\r\n\r\n        contactArray={contactArray}\r\n        duplicateName={duplicateName}\r\n              \r\n        />\r\n\r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n        <TileList contactArray={contactArray} />\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAElD,SAASC,WAAW,QAAQ,0CAA0C;AACtE,SAASC,QAAQ,QAAQ,oCAAoC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9D,OAAO,MAAMC,YAAY,GAAGA,CAAAC,IAAA,EAAAC,KAAA,KAAkC;EAAAC,EAAA;EAAA,IAAjC;IAACC;EAAY,CAAC,GAAAH,IAAA;EAAA,IAAE;IAACI;EAAU,CAAC,GAAAH,KAAA;EACvD;AACF;AACA;AACA;;EAEE,MAAM,CAACI,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACgB,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;;EAEtC;EACA,MAAM,CAACkB,aAAa,EAAEC,gBAAgB,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC;EAEzD,MAAMoB,YAAY,GAAIC,CAAC,IAAK;IAC1BA,CAAC,CAACC,cAAc,EAAE;IAClB;AACJ;AACA;AACA;;IAEM,MAAMC,UAAU,GAAG;MACjBX,IAAI,EAAEA,IAAI;MACVE,KAAK,EAAEA,KAAK;MACZE,KAAK,EAAEA;IACT,CAAC;IACDL,UAAU,CAACY,UAAU,CAAC;IACtBC,OAAO,CAACC,GAAG,CAACF,UAAU,CAAC;IAEvBV,OAAO,CAAC,EAAE,CAAC;IACXE,QAAQ,CAAC,EAAE,CAAC;IACZE,QAAQ,CAAC,EAAE,CAAC;EAId,CAAC;;EAIH;AACF;AACA;AACA;;EAEEhB,SAAS,CAAC,MAAK;IACb,IAAGS,YAAY,CAACgB,IAAI,CAAEC,OAAO,IAAIA,OAAO,CAACf,IAAI,KAAKA,IAAI,CAAC,EAAE;MACvDO,gBAAgB,CAAC,IAAI,CAAC;IACxB,CAAC,MACI;MACHA,gBAAgB,CAAC,KAAK,CAAC;IAEzB;EAEF,CAAC,EAAE,CAACP,IAAI,CAAC,CAAC;EAIV,oBACEP,OAAA;IAAAuB,QAAA,gBACEvB,OAAA;MAAAuB,QAAA,gBACEvB,OAAA;QAAAuB,QAAA,EAAI;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eACpB3B,OAAA,CAACH,WAAW;QAEZU,IAAI,EAAEA,IAAK;QACXC,OAAO,EAAEA,OAAQ;QACjBC,KAAK,EAAEA,KAAM;QACbC,QAAQ,EAAEA,QAAS;QACnBC,KAAK,EAAEA,KAAM;QACbC,QAAQ,EAAEA,QAAS;QACnBG,YAAY,EAAEA,YAAa;QAE3BV,YAAY,EAAEA,YAAa;QAC3BQ,aAAa,EAAEA;MAAc;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAE3B;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAEM,eACV3B,OAAA;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAM,eACN3B,OAAA;MAAAuB,QAAA,gBACEvB,OAAA;QAAAuB,QAAA,EAAI;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eACjB3B,OAAA,CAACF,QAAQ;QAACO,YAAY,EAAEA;MAAa;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAChC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACN;AAEV,CAAC;AAACvB,EAAA,CAnFWH,YAAY;AAAA2B,EAAA,GAAZ3B,YAAY;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}